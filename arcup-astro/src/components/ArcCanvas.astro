---
---
<canvas data-arc-canvas aria-hidden="true"></canvas>
<noscript>
  <div aria-hidden="true" style="position:fixed;inset:0;pointer-events:none;z-index:-1;background:radial-gradient(140% 140% at 15% 20%, rgba(94, 234, 212, 0.12), transparent 50%), radial-gradient(120% 120% at 80% 0%, rgba(45, 212, 191, 0.14), transparent 55%), linear-gradient(180deg, #04050a 0%, #020308 70%, #010208 100%)"></div>
  <span class="visually-hidden">Animated background disabled because JavaScript is off.</span>
 </noscript>
<script is:inline>
  (() => {
    const canvas = document.querySelector('[data-arc-canvas]');
    const toggleBtn = document.querySelector('[data-motion-toggle]');

    if (!canvas) {
      return;
    }

    const ctx = canvas.getContext('2d');
    if (!ctx) {
      return;
    }

    let width = 0;
    let height = 0;
    let animationId = 0;
    let motionEnabled = true;

    const resize = () => {
      width = canvas.width = window.innerWidth;
      height = canvas.height = window.innerHeight;
    };

    window.addEventListener('resize', resize);
    resize();

    class Arc {
      constructor() {
        this.reset();
      }

      reset() {
        const edge = Math.floor(Math.random() * 4);
        if (edge === 0) {
          this.x = Math.random() * width;
          this.y = 0;
        } else if (edge === 1) {
          this.x = Math.random() * width;
          this.y = height;
        } else if (edge === 2) {
          this.x = 0;
          this.y = Math.random() * height;
        } else {
          this.x = width;
          this.y = Math.random() * height;
        }

        this.alpha = 0;
        this.fadingIn = true;
        this.life = 0;
        this.maxLife = 80 + Math.random() * 120;
        this.segments = [];

        for (let i = 0; i < 3; i += 1) {
          const branchAngle = Math.random() * Math.PI * 2;
          this.segments.push({
            x: this.x,
            y: this.y,
            angle: branchAngle,
            length: Math.min(width, height) * 0.2 + Math.random() * Math.min(width, height) * 0.1,
          });
        }
      }

      update() {
        this.life += 1;
        if (this.fadingIn) {
          this.alpha += 0.01;
          if (this.alpha >= 0.4) {
            this.fadingIn = false;
          }
        } else {
          this.alpha -= 0.005;
        }

        if (this.life > this.maxLife || this.alpha <= 0) {
          this.reset();
        }
      }

      draw() {
        ctx.strokeStyle = `rgba(10,147,150,${this.alpha})`;
        ctx.lineWidth = 1;
        this.segments.forEach((segment) => {
          ctx.beginPath();
          ctx.moveTo(segment.x, segment.y);
          const endX = segment.x + Math.cos(segment.angle) * segment.length;
          const endY = segment.y + Math.sin(segment.angle) * segment.length;
          ctx.lineTo(endX, endY);
          ctx.stroke();

          if (Math.random() < 0.15) {
            ctx.lineTo(
              endX + Math.cos(segment.angle + 0.4) * 10,
              endY + Math.sin(segment.angle + 0.4) * 10,
            );
          }
        });
      }
    }

    const arcs = Array.from({ length: 20 }, () => new Arc());

    const stopAnimation = () => {
      cancelAnimationFrame(animationId);
      ctx.clearRect(0, 0, width, height);
      motionEnabled = false;
    };

    const animate = () => {
      ctx.clearRect(0, 0, width, height);
      arcs.forEach((arc) => {
        arc.update();
        arc.draw();
      });
      animationId = requestAnimationFrame(animate);
    };

    const startAnimation = () => {
      if (!motionEnabled) {
        motionEnabled = true;
        animate();
      }
    };

    if (window.matchMedia('(prefers-reduced-motion: reduce)').matches) {
      stopAnimation();
      if (toggleBtn) {
        toggleBtn.textContent = 'Enable Motion';
      }
    } else {
      animate();
    }

    if (toggleBtn) {
      toggleBtn.addEventListener('click', () => {
        if (motionEnabled) {
          stopAnimation();
          toggleBtn.textContent = 'Enable Motion';
        } else {
          startAnimation();
          toggleBtn.textContent = 'Disable Motion';
        }
      });
    }
  })();
</script>
